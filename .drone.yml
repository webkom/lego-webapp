pipeline:
  postgres:
    image: postgres:9.5
    detach: true
    group: services
    environment:
      - POSTGRES_USER=lego
    when:
      event: [push]
  minio:
    image: minio/minio
    detach: true
    group: services
    environment:
      - MINIO_ACCESS_KEY=lego-dev
      - MINIO_SECRET_KEY=lego-dev
    command: server /export
    when:
      event: [push]
  thumbor:
    image: apsl/thumbor:latest
    detach: true
    group: services
    environment:
      SECURITY_KEY: 'lego-dev'
      MAX_WIDTH: '1000'
      MAX_HEIGHT: '800'
      QUALITY: '98'
      ALLOW_UNSAFE_URL: '0'
      ALLOW_OLD_URLS: '0'
      AWS_ACCESS_KEY_ID: 'lego-dev'
      AWS_SECRET_ACCESS_KEY: 'lego-dev'
      TC_AWS_LOADER_BUCKET: lego
      TC_AWS_REGION: us-east-1
      TC_AWS_ENDPOINT: '"http://minio:9000"'
      LOADER: tc_aws.loaders.s3_loader
    links:
      - minio
    when:
      event: [push]
  redis:
    image: redis
    detach: true
    group: services
    when:
      event: [push]
  api:
    image: registry.abakus.no/webkom/lego:latest
    detach: true
    pull: true
    group: services
    command: >
      bash -c "./wait-for-it.sh -t 60 postgres:5432 &&
               ./wait-for-it.sh -t 60 redis:6379 &&
               ./wait-for-it.sh -t 60 minio:9000 &&
               ./wait-for-it.sh -t 60 thumbor:8000 &&
               python manage.py reset_db --noinput &&
               python manage.py migrate &&
               python manage.py load_fixtures --development &&
               python manage.py runserver 0.0.0.0:8000"
    environment:
      - PORT=8000
      - ALLOWED_HOSTS=*,
      - DATABASE_URL=postgres://lego@postgres:5432/lego
      - SECRET_KEY=abc123
      - SERVER_URL=http://api:8000
      - FRONTEND_URL=http://ssr:3000
      - CACHE_URL=rediscache://redis/0?client_class=django_redis.client.DefaultClient
      - EMAIL_URL=smtp://localhost
      - AWS_ACCESS_KEY_ID=lego-dev
      - AWS_SECRET_ACCESS_KEY=lego-dev
      - AWS_REGION=us-east-1
      - AWS_S3_BUCKET=lego
      - AWS_ENTRYPOINT=http://minio:9000
      - THUMBOR_SERVER=http://thumbor:8000
      - THUMBOR_SECURITY_KEY=lego-dev
      - SENTRY=http://sentry:sentry@localhost/2
      - CELERY_BROKER_URL=redis://redis/1
      - CHANNELS_REDIS_URL=redis://redis/2
      - ELASTICSEARCH_HOST=http://elasticsearch
      - STRIPE_API_KEY=123
      - STRIPE_WEBHOOK_SECRET=123
      - CAPTCHA_KEY=123
      - LDAP_SERVER=localhost
      - LDAP_USER=123
      - LDAP_PASSWORD=123
      - APNS_CERTIFICATE=123
      - SEARCH_BACKEND=postgres
      - ELASTICSEARCH_HOST=ignored
    when:
      event: [push]
  legocypresshelper:
    image: abakus/lego-cypress-helper:latest
    detach: true
    pull: true
    group: services
    when:
      event: [push]
    environment:
      - PG_HOST=postgres
      - PG_USERNAME=lego
      - PG_DATABASE=lego
    commands:
      - cd /app
      - ./wait-for-it.sh -t 420 api:8000
      - node index.js
      - echo "server stopped"
  setup:
    image: node:11
    when:
      event: [push]
    environment:
      - CYPRESS_INSTALL_BINARY=0
    commands:
      - yarn --frozen-lockfile
  build_server:
    image: node:11
    when:
      event: [push]
    group: testing
    commands:
      - yarn build:server
  build_client:
    image: node:11
    when:
      event: [push]
    group: testing
    commands:
      - yarn build:client
  test:
    image: node:11
    when:
      event: [push]
    group: testing
    commands:
      - yarn test
  lint:
    image: node:11
    when:
      event: [push]
    group: testing
    commands:
      - yarn lint
  flow:
    image: node:11
    when:
      event: [push]
    group: testing
    commands:
      - yarn flow --quiet
  install_cypress:
    image: node:11
    when:
      event: [push]
    group: testing
    environment:
      - CYPRESS_CACHE_FOLDER=/drone/src/.cypress_cache
    commands:
      - yarn cypress install
  ssr:
    image: node:11
    detach: true
    when:
      event: [push]
    environment:
      - API_URL=http://api:8000/api/v1
      - BASE_URL=http://api:8000
      - WS_URL=ws://api:8000
    commands:
      - yarn ssr
  cypress:
    image: cypress/browsers:chrome69
    shm_size: 100000000 # 100MB
    when:
      event: [push]
    environment:
      - CYPRESS_API_BASE_URL=http://api:8000
      - CYPRESS_RESET_DB_API=http://legocypresshelper:3030
      - CYPRESS_BASE_URL=http://ssr:3000
      - CYPRESS_CACHE_FOLDER=/drone/src/.cypress_cache
    secrets: [cypress_record_key]
    commands:
      - ./wait-for-it.sh -t 180 ssr:3000
      - ./wait-for-it.sh -t 180 legocypresshelper:3030
      - yarn cypress run --record
  docker:
    image: plugins/docker
    when:
      branch:
        - prod
      event: push
      status: success
    registry: https://registry.abakus.no
    repo: registry.abakus.no/webkom/lego-webapp
    secrets: [docker_username, docker_password, sentry_auth_token]
    tags:
      - ${DRONE_BRANCH}-${DRONE_COMMIT_SHA:0:7}
    build_args:
      - RELEASE=${DRONE_BRANCH}-${DRONE_COMMIT_SHA:0:7}
      - SENTRY_AUTH_TOKEN
      - SENTRY_ORG=webkom
      - SENTRY_PROJECT=lego-webapp
      - SENTRY_URL=https://sentry.abakus.no/
