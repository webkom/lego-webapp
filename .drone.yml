kind: pipeline
name: default

steps:
  - name: setup
    image: node:11
    depends_on: [clone]
    when:
      event: push
    environment:
      CYPRESS_INSTALL_BINARY: 0
    commands:
      - yarn --frozen-lockfile
  - name: build
    image: node:11
    depends_on: [setup]
    when:
      event: push
    commands:
      - yarn build
  - name: ssr
    image: node:11
    depends_on: [build]
    when:
      event: push
    ports:
      - 3000
    environment:
      API_URL: http://api:8000/api/v1
      BASE_URL: http://api:8000
      WS_URL: ws://api:8000
    detach: true
    commands:
      - yarn ssr
  - name: install_cypress
    image: cypress/browsers:chrome69
    when:
      event: push
    depends_on: [setup]
    environment:
      CYPRESS_CACHE_FOLDER: /drone/src/.cypress_cache
    commands:
      - yarn cypress install
  - name: cypress
    # image: cypress/base:10 # tests exit and "succeed" prematurely with this for some reason
    image: cypress/browsers:chrome69
    when:
      event: push
    depends_on: [install_cypress, ssr]
    resources:
      limits:
        cpu: 4
        memory: 800Mi
      requests:
        cpu: 0.5
        memory: 500Mi
    volumes:
      - name: droneshm
        path: /dev/shm
    environment:
      CYPRESS_API_BASE_URL: http://api:8000
      CYPRESS_RESET_DB_API: http://legocypresshelper:3030
      CYPRESS_BASE_URL: http://ssr:3000
      CYPRESS_CACHE_FOLDER: /drone/src/.cypress_cache
      CYPRESS_RECORD_KEY:
        from_secret: cypress_record_key
    commands:
      - ./wait-for-it.sh -t 180 api:8000
      - ./wait-for-it.sh -t 180 ssr:3000
      - ./wait-for-it.sh -t 180 legocypresshelper:3030
      - yarn cypress run --record
      - echo "finished."
    secrets: [cypress_record_key]
  - name: test
    image: node:11
    when:
      event: push
    depends_on: [setup]
    commands:
      - yarn test
  - name: lint
    image: node:11
    when:
      event: push
    depends_on: [setup]
    commands:
      - yarn lint
  - name: flow
    image: node:11
    when:
      event: push
    depends_on: [setup]
    commands:
      - yarn flow --quiet
  - name: docker
    image: plugins/docker
    when:
      branch:
        - prod
      event: push
      status: success
    settings:
      registry: https://registry.abakus.no
      repo: registry.abakus.no/webkom/lego-webapp
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      tags:
        - ${DRONE_BRANCH}-${DRONE_COMMIT_SHA:0:7}
      build_args:
        - RELEASE=${DRONE_BRANCH}-${DRONE_COMMIT_SHA:0:7}
        - SENTRY_AUTH_KEY
        - SENTRY_ORG=webkom
        - SENTRY_PROJECT=lego-webapp
        - SENTRY_URL=https://sentry.abakus.no/
    environment:
      SENTRY_AUTH_KEY:
        from_secret: sentry_auth_key
    depends_on: [build, cypress, test, lint, flow]

services:
  - name: postgres
    image: postgres:9.5
    ports:
      - 5432
    environment:
      POSTGRES_USER: lego
    when:
      event: push
  - name: legocypresshelper
    image: abakus/lego-cypress-helper:latest
    pull: always
    when:
      event: push
    ports:
      - 3030
    environment:
      PG_HOST: postgres
      PG_USERNAME: lego
      PG_DATABASE: lego
    commands:
      - cd /app
      - ./wait-for-it.sh -t 420 api:8000 # wait for api because it runs migrations+fixtures
      - node index.js
      - echo "server stopped"
  - name: minio
    image: minio/minio
    ports:
      - 9000
    environment:
      MINIO_ACCESS_KEY: lego-dev
      MINIO_SECRET_KEY: lego-dev
    command: ['server', '/export']
    when:
      event: push
  - name: thumbor
    image: apsl/thumbor:latest
    commands:
      - echo "starting thumbor"
      - /docker-entrypoint.sh thumbor
    ports:
      - 80
    environment:
      SECURITY_KEY: 'lego-dev'
      MAX_WIDTH: '1000'
      MAX_HEIGHT: '800'
      QUALITY: '98'
      ALLOW_UNSAFE_URL: '0'
      ALLOW_OLD_URLS: '0'
      THUMBOR_PORT: 80
      AWS_ACCESS_KEY_ID: 'lego-dev'
      AWS_SECRET_ACCESS_KEY: 'lego-dev'
      TC_AWS_LOADER_BUCKET: lego
      TC_AWS_REGION: us-east-1
      TC_AWS_ENDPOINT: '"http://minio:9000"'
      LOADER: tc_aws.loaders.s3_loader
    when:
      event: push
  - name: redis
    image: redis
    ports:
      - 6379
    when:
      event: push
  - name: api
    image: registry.abakus.no/webkom/lego:pgsearch
    pull: always
    ports:
      - 8000
    commands:
      - sleep 30 # if we don't sleep, the service hostnames may not resolve
      - ./wait-for-it.sh -t 60 postgres:5432
      - ./wait-for-it.sh -t 60 redis:6379
      - ./wait-for-it.sh -t 60 minio:9000
      - ./wait-for-it.sh -t 60 thumbor:80
      - cd /app # workdir is webapp code by default
      - python manage.py reset_db --noinput
      - python manage.py migrate
      - python manage.py migrate_search
      - python manage.py load_fixtures --development
      - python manage.py rebuild_index
      - python manage.py runserver 0.0.0.0:8000
    environment:
      PORT: 8000
      ALLOWED_HOSTS: '*,'
      DATABASE_URL: postgres://lego@postgres:5432/lego
      SECRET_KEY: abc123
      SERVER_URL: http://api:8000
      FRONTEND_URL: http://ssr:3000
      CACHE_URL: rediscache://redis/0?client_class=django_redis.client.DefaultClient
      EMAIL_URL: smtp://localhost
      AWS_ACCESS_KEY_ID: lego-dev
      AWS_SECRET_ACCESS_KEY: lego-dev
      AWS_REGION: us-east-1
      AWS_S3_BUCKET: lego
      AWS_ENTRYPOINT: http://minio:9000
      THUMBOR_SERVER: http://thumbor:80
      THUMBOR_SECURITY_KEY: lego-dev
      SENTRY: http://sentry:sentry@localhost/2
      CELERY_BROKER_URL: redis://redis/1
      CHANNELS_REDIS_URL: redis://redis/2
      STRIPE_API_KEY: 123
      STRIPE_WEBHOOK_SECRET: 123
      CAPTCHA_KEY: 123
      LDAP_SERVER: localhost
      LDAP_USER: 123
      LDAP_PASSWORD: 123
      APNS_CERTIFICATE: 123
      SEARCH_BACKEND: postgres
      ELASTICSEARCH_HOST: ignored
    when:
      event: push

image_pull_secrets:
  - dockerconfigjson

volumes:
  - name: droneshm
    temp: {}
